---
/** Match Starlight's ToC item shape */
type TocItem = {
    slug?: string;
    text: string;
    items?: TocItem[];
    children?: TocItem[]; // fallback
};

interface Props {
    sublist: TocItem[];
    nested?: boolean;
}

const { sublist, nested } = Astro.props;
const getChildren = (i: TocItem) => (i.items?.length ? i.items : (i.children?.length ? i.children : []));
---

<ul class:list={{ 'top-level': !nested }}>
    {sublist?.map((entry) => {
        const kids = getChildren(entry);
        const hasChildren = kids.length > 0;
        return (
                <li>
                    {!hasChildren ? (
                            <a
                                    href={entry.slug ? `#${entry.slug}` : '#'}
                                    class:list={[{ large: !nested }]}
                            >
                                <span>{entry.text}</span>
                            </a>
                    ) : (
                            <details data-toc-group>
                                <summary>
                                    <div class="group-label">
                                        <span class="large">{entry.text}</span>
                                    </div>
                                    {/* caret */}
                                    <svg aria-hidden="true" class="caret astro-3ii7xxms astro-c6vsoqas" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="--sl-icon-size: 1.25rem;" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="m14.83 11.29-4.24-4.24a1 1 0 1 0-1.42 1.41L12.71 12l-3.54 3.54a1 1 0 0 0 0 1.41 1 1 0 0 0 .71.29 1 1 0 0 0 .71-.29l4.24-4.24a1.002 1.002 0 0 0 0-1.42Z"></path></svg>
                                </summary>
                                <Astro.self sublist={kids} nested />
                            </details>
                    )}
                </li>
        );
    })}
</ul>

<style>
    @layer starlight.core {
        ul {
            --sl-sidebar-item-padding-inline: 0.5rem;
            list-style: none;
            padding: 0;
        }
        li { overflow-wrap: anywhere; }

        /* Indent nested lists + hairline */
        ul ul li {
            margin-inline-start: var(--sl-sidebar-item-padding-inline);
            border-inline-start: 1px solid var(--sl-color-hairline-light);
            padding-inline-start: var(--sl-sidebar-item-padding-inline);
        }

        .large {
            font-size: var(--sl-text-lg);
            font-weight: 600;
            color: var(--sl-color-white);
        }
        .top-level > li > a.large {
            font-size: var(--sl-text-lg);
            font-weight: 600;
            color: var(--sl-color-white);
        }

        .top-level > li + li { margin-top: 0.75rem; }

        summary {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.2em var(--sl-sidebar-item-padding-inline);
            line-height: 1.4;
            cursor: pointer;
            user-select: none;
        }
        summary::marker,
        summary::-webkit-details-marker { display: none; }

        .caret {
            transition: transform 0.2s ease-in-out;
            flex-shrink: 0;
        }
        :global([dir='rtl']) .caret { transform: rotateZ(180deg); }
        [open] > summary .caret { transform: rotateZ(90deg); }

        a {
            display: block;
            border-radius: 0.25rem;
            text-decoration: none;
            color: var(--sl-color-gray-2);
            padding: 0.3em var(--sl-sidebar-item-padding-inline);
            line-height: 1.4;
        }
        a:hover, a:focus { color: var(--sl-color-white); }

        /* Active/current heading */
        a[aria-current='true'],
        a[aria-current='true']:hover,
        a[aria-current='true']:focus {
            font-weight: 600;
            color: var(--sl-color-text-invert);
            background-color: var(--sl-color-text-accent);
        }

        a > *:not(:last-child),
        .group-label > *:not(:last-child) { margin-inline-end: 0.25em; }

        @media (min-width: 50rem) {
            .top-level > li + li { margin-top: 0.5rem; }
            .large { font-size: var(--sl-text-base); }
            a { font-size: var(--sl-text-sm); }
        }
    }
</style>